generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  balance            Decimal           @default(0.0)
  
  stripeCustomerId   String?           @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String?         @unique @map(name: "stripe_subscription_id")
  stripePriceId      String?           @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?     @map(name: "stripe_current_period_end")
  isAdmin            Boolean           @default(false)
  
  userInteractions   UserInteraction[] // Add this line to establish the relation
}




model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Card {
  id               String             @id @default(uuid())
  title            String
  description      String
  slug             String             @unique
  source           String
  useCases         String[]
  tools            String[]
  quotes           String[]
  goal             String
  bestFor          String
  proof            String
  nuances          String[]
  impactOnLife     String
  investments      Investment?        @relation("CardInvestment")
  risks            String
  getStarted       String[]
  alternatives     String[]
  videoUrl         String
  sourceImageUrl   String?
  ratings          Rating?            @relation("CardRating")
  socialMetrics    SocialMetric?      @relation("CardSocialMetric")
  userInteractions UserInteraction[]  // Add this line to establish the relation
}


model Investment {
  id           String  @id @default(uuid())
  price        String
  priceNumeric Float
  time         String
  effort       String
  cardId       String  @unique
  card         Card    @relation("CardInvestment", fields: [cardId], references: [id], map: "FK_Investment_Card")
}

model Rating {
  id             String  @id @default(uuid())
  valueForMoney  Int
  evidence       Int
  safety         Int
  overall        Int
  cardId         String  @unique
  card           Card    @relation("CardRating", fields: [cardId], references: [id], map: "FK_Rating_Card")
}

model SocialMetric {
  id         String  @id @default(uuid())
  views      Int     @default(0)
  likes      Int     @default(0)
  dislikes   Int     @default(0)
  bookmarks  Int     @default(0)
  cardId     String  @unique
  card       Card    @relation("CardSocialMetric", fields: [cardId], references: [id], map: "FK_SocialMetric_Card")
}

model UserInteraction {
  id        String   @id @default(cuid())
  userId    String
  cardId    String
  action    InteractionType
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId, action])
}

enum InteractionType {
  LIKED
  DISLIKED
  BOOKMARKED
}
